// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Dapper;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Storage;
using ScoreSharpTestData.Models;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace ScoreSharpTestData.Models
{
    public partial class ScoreSharpContext
    {
        private IScoreSharpContextProcedures _procedures;

        public virtual IScoreSharpContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new ScoreSharpContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IScoreSharpContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Usp_GetApplyCreditCardInfoWithParamsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Usp_GetApplyCreditCardInfoWithPrimaryAddressByApplyNoResult1>().HasNoKey().ToView(null);
            modelBuilder.Entity<Usp_GetApplyCreditCardInfoWithPrimaryAddressByApplyNoResult2>().HasNoKey().ToView(null);
        }
    }

    public partial class ScoreSharpContextProcedures : IScoreSharpContextProcedures
    {
        private readonly ScoreSharpContext _context;

        public ScoreSharpContextProcedures(ScoreSharpContext context)
        {
            _context = context;
        }

        public virtual async Task<List<Usp_GetApplyCreditCardInfoWithParamsResult>> Usp_GetApplyCreditCardInfoWithParamsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Usp_GetApplyCreditCardInfoWithParamsResult>("EXEC @returnValue = [dbo].[Usp_GetApplyCreditCardInfoWithParams]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<(List<Usp_GetApplyCreditCardInfoWithPrimaryAddressByApplyNoResult1> Result1, List<Usp_GetApplyCreditCardInfoWithPrimaryAddressByApplyNoResult2> Result2)> Usp_GetApplyCreditCardInfoWithPrimaryAddressByApplyNoAsync(string applyNo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.ReturnValue,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "applyNo",
                    Size = 13,
                    Value = applyNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };

            var dynamic = CreateDynamic(sqlParameters);
            (List<Usp_GetApplyCreditCardInfoWithPrimaryAddressByApplyNoResult1> Result1, List<Usp_GetApplyCreditCardInfoWithPrimaryAddressByApplyNoResult2> Result2)  _;

            using (var reader = await GetMultiReaderAsync(_context, dynamic, "[dbo].[Usp_GetApplyCreditCardInfoWithPrimaryAddressByApplyNo]"))
            {
                _ = ((await reader.ReadAsync<Usp_GetApplyCreditCardInfoWithPrimaryAddressByApplyNoResult1>()).ToList(), (await reader.ReadAsync<Usp_GetApplyCreditCardInfoWithPrimaryAddressByApplyNoResult2>()).ToList());
            }

            returnValue?.SetValue(dynamic.Get<int>("returnValue"));

            return _;
        }

        private static DynamicParameters CreateDynamic(SqlParameter[] sqlParameters)
        {
            var dynamic = new DynamicParameters();
            foreach (var sqlParameter in sqlParameters)
            {
                dynamic.Add(sqlParameter.ParameterName, sqlParameter.Value, sqlParameter.DbType, sqlParameter.Direction, sqlParameter.Size, sqlParameter.Precision, sqlParameter.Scale);
            }

            return dynamic;
        }

        private async Task<SqlMapper.GridReader> GetMultiReaderAsync(DbContext db, DynamicParameters dynamic, string sql)
        {
            IDbTransaction tran = null;
            if (db.Database.CurrentTransaction is IDbContextTransaction ctxTran)
            {
                tran = ctxTran.GetDbTransaction();
            }

            return await ((IDbConnection)db.Database.GetDbConnection())
                .QueryMultipleAsync(sql, dynamic, tran, db.Database.GetCommandTimeout(), CommandType.StoredProcedure);
        }
    }
}
