// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace ScoreSharpTestData.Models;

public partial class ScoreSharpContext : DbContext
{
    public ScoreSharpContext(DbContextOptions<ScoreSharpContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AuthAction> AuthActions { get; set; }

    public virtual DbSet<AuthRole> AuthRoles { get; set; }

    public virtual DbSet<AuthRoleRouterAction> AuthRoleRouterActions { get; set; }

    public virtual DbSet<AuthRouter> AuthRouters { get; set; }

    public virtual DbSet<AuthRouterCategory> AuthRouterCategories { get; set; }

    public virtual DbSet<AuthUser> AuthUsers { get; set; }

    public virtual DbSet<AuthUserRole> AuthUserRoles { get; set; }

    public virtual DbSet<ReviewerApplyCreditCardInfoAddress> ReviewerApplyCreditCardInfoAddresses { get; set; }

    public virtual DbSet<ReviewerApplyCreditCardInfoPrimary> ReviewerApplyCreditCardInfoPrimaries { get; set; }

    public virtual DbSet<ReviewerApplyCreditCardInfoSupplementary> ReviewerApplyCreditCardInfoSupplementaries { get; set; }

    public virtual DbSet<ReviewerPeddingApplyCardCheckJobForNotA02> ReviewerPeddingApplyCardCheckJobForNotA02s { get; set; }

    public virtual DbSet<ReviewerPeddingApplyCardCheckJobForNotA02ErrorLog> ReviewerPeddingApplyCardCheckJobForNotA02ErrorLogs { get; set; }

    public virtual DbSet<ReviewerPeddingApplyCreditCardInfoAddress> ReviewerPeddingApplyCreditCardInfoAddresses { get; set; }

    public virtual DbSet<ReviewerPeddingApplyCreditCardInfoPrimary> ReviewerPeddingApplyCreditCardInfoPrimaries { get; set; }

    public virtual DbSet<SetUpAddressInfo> SetUpAddressInfos { get; set; }

    public virtual DbSet<SetUpAmljobLevel> SetUpAmljobLevels { get; set; }

    public virtual DbSet<SetUpAmlprofession> SetUpAmlprofessions { get; set; }

    public virtual DbSet<SetUpApplicableInterestRateLimit> SetUpApplicableInterestRateLimits { get; set; }

    public virtual DbSet<SetUpApplicationCategory> SetUpApplicationCategories { get; set; }

    public virtual DbSet<SetUpApplicationCategoryCard> SetUpApplicationCategoryCards { get; set; }

    public virtual DbSet<SetUpBillDay> SetUpBillDays { get; set; }

    public virtual DbSet<SetUpBlackListReason> SetUpBlackListReasons { get; set; }

    public virtual DbSet<SetUpCard> SetUpCards { get; set; }

    public virtual DbSet<SetUpCardCardPromotion> SetUpCardCardPromotions { get; set; }

    public virtual DbSet<SetUpCardPromotion> SetUpCardPromotions { get; set; }

    public virtual DbSet<SetUpCitizenship> SetUpCitizenships { get; set; }

    public virtual DbSet<SetUpCreditCheckCode> SetUpCreditCheckCodes { get; set; }

    public virtual DbSet<SetUpEucountry> SetUpEucountries { get; set; }

    public virtual DbSet<SetUpEusanctionCountry> SetUpEusanctionCountries { get; set; }

    public virtual DbSet<SetUpHighFinancialSecrecyCountry> SetUpHighFinancialSecrecyCountries { get; set; }

    public virtual DbSet<SetUpHighRiskCountry> SetUpHighRiskCountries { get; set; }

    public virtual DbSet<SetUpIdcardRenewalLocation> SetUpIdcardRenewalLocations { get; set; }

    public virtual DbSet<SetUpInternalIp> SetUpInternalIps { get; set; }

    public virtual DbSet<SetUpLongTermReason> SetUpLongTermReasons { get; set; }

    public virtual DbSet<SetUpMainIncomeAndFund> SetUpMainIncomeAndFunds { get; set; }

    public virtual DbSet<SetUpMakeCardFailedReason> SetUpMakeCardFailedReasons { get; set; }

    public virtual DbSet<SetUpProjectCode> SetUpProjectCodes { get; set; }

    public virtual DbSet<SetUpPromotionUnit> SetUpPromotionUnits { get; set; }

    public virtual DbSet<SetUpRejectionReason> SetUpRejectionReasons { get; set; }

    public virtual DbSet<SetUpSupplementReason> SetUpSupplementReasons { get; set; }

    public virtual DbSet<SetUpUnsanctionCountry> SetUpUnsanctionCountries { get; set; }

    public virtual DbSet<SystemDeleteLog> SystemDeleteLogs { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AuthAction>(entity =>
        {
            entity.HasKey(e => e.ActionId).HasName("PK__Auth_Act__FFE3F4D9B309475C");

            entity.ToTable("Auth_Action");

            entity.Property(e => e.ActionId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("英數字，API Action 名稱");
            entity.Property(e => e.ActionName)
                .IsRequired()
                .HasMaxLength(30)
                .HasComment("中文，前端顯示功能");
            entity.Property(e => e.AddTime)
                .HasComment("新增時間")
                .HasColumnType("datetime");
            entity.Property(e => e.AddUserId)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("新增員工");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Y/N");
            entity.Property(e => e.IsCommon)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasComment("Y/N，如果是Y 不檢查全縣");
            entity.Property(e => e.RouterId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("關聯Auth_Router");
            entity.Property(e => e.UpdateTime)
                .HasComment("修正時間")
                .HasColumnType("datetime");
            entity.Property(e => e.UpdateUserId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("修正員工");
        });

        modelBuilder.Entity<AuthRole>(entity =>
        {
            entity.HasKey(e => e.RoleId).HasName("PK__Auth_Rol__8AFACE1A793E252F");

            entity.ToTable("Auth_Role");

            entity.Property(e => e.RoleId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("角色PK(英數字)");
            entity.Property(e => e.AddTime)
                .HasComment("新增時間")
                .HasColumnType("datetime");
            entity.Property(e => e.AddUserId)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("新增員工");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("是否啟用，範例: Y | N");
            entity.Property(e => e.RoleName)
                .IsRequired()
                .HasMaxLength(30)
                .HasComment("角色名稱(中文)");
            entity.Property(e => e.UpdateTime)
                .HasComment("修正時間")
                .HasColumnType("datetime");
            entity.Property(e => e.UpdateUserId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("修正員工");
        });

        modelBuilder.Entity<AuthRoleRouterAction>(entity =>
        {
            entity.HasKey(e => e.SeqNo).HasName("PK__Auth_Rol__7AFBF48D1063B1F7");

            entity.ToTable("Auth_Role_Router_Action");

            entity.Property(e => e.SeqNo).HasComment("自增");
            entity.Property(e => e.ActionId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("關聯Auth_Action");
            entity.Property(e => e.AddTime)
                .HasComment("新增時間")
                .HasColumnType("datetime");
            entity.Property(e => e.AddUserId)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("新增員工");
            entity.Property(e => e.RoleId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("關聯Auth_Role");
            entity.Property(e => e.RouterId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("關聯Auth_Router");
        });

        modelBuilder.Entity<AuthRouter>(entity =>
        {
            entity.HasKey(e => e.RouterId).HasName("PK__Auth_Rou__6C9DDD0A454E85FD");

            entity.ToTable("Auth_Router");

            entity.Property(e => e.RouterId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("英數字，前端顯示不在網址，如：Todo");
            entity.Property(e => e.AddTime)
                .HasComment("新增時間")
                .HasColumnType("datetime");
            entity.Property(e => e.AddUserId)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("新增員工");
            entity.Property(e => e.DynamicParams)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("給前端串接參數使用，如：/Todo/1 或 /Todo?params=");
            entity.Property(e => e.Icon)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasComment("用於裝飾前端網頁");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Y/N");
            entity.Property(e => e.RouterCategoryId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("關聯Auth_RouterCategory");
            entity.Property(e => e.RouterName)
                .IsRequired()
                .HasMaxLength(30)
                .HasComment("中文，前端顯示SideBar頁面名稱");
            entity.Property(e => e.Sort).HasComment("排序");
            entity.Property(e => e.UpdateTime)
                .HasComment("修正時間")
                .HasColumnType("datetime");
            entity.Property(e => e.UpdateUserId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("修正員工");
        });

        modelBuilder.Entity<AuthRouterCategory>(entity =>
        {
            entity.HasKey(e => e.RouterCategoryId).HasName("PK__Auth_Rou__335D8A82E8D74AB3");

            entity.ToTable("Auth_RouterCategory");

            entity.Property(e => e.RouterCategoryId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("英數字, 前端顯示網址; 例: TodoCategory");
            entity.Property(e => e.AddTime)
                .HasComment("新增時間")
                .HasColumnType("datetime");
            entity.Property(e => e.AddUserId)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("新增員工");
            entity.Property(e => e.Icon)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasComment("用於裝飾前端網頁");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Y | N");
            entity.Property(e => e.RouterCategoryName)
                .IsRequired()
                .HasMaxLength(30)
                .HasComment("中文, 前端顯示SideBar類別");
            entity.Property(e => e.Sort).HasComment("排序");
            entity.Property(e => e.UpdateTime)
                .HasComment("修改時間")
                .HasColumnType("datetime");
            entity.Property(e => e.UpdateUserId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("修改員工");
        });

        modelBuilder.Entity<AuthUser>(entity =>
        {
            entity.HasKey(e => e.UserId);

            entity.ToTable("Auth_User", tb => tb.HasComment("使用者"));

            entity.Property(e => e.UserId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("使用者帳號，目前來源為 AD Server");
            entity.Property(e => e.AddTime)
                .HasComment("新增時間")
                .HasColumnType("datetime");
            entity.Property(e => e.AddUserId)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("新增員工");
            entity.Property(e => e.AuthorizationAmount).HasComment("授權額度");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("是否啟用，Y | N");
            entity.Property(e => e.UpdateTime)
                .HasComment("修正時間")
                .HasColumnType("datetime");
            entity.Property(e => e.UpdateUserId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("修正員工");
            entity.Property(e => e.UserName)
                .IsRequired()
                .HasMaxLength(20)
                .HasComment("使用者姓名");
        });

        modelBuilder.Entity<AuthUserRole>(entity =>
        {
            entity.HasKey(e => e.SeqNo).HasName("PK__Auth_Use__7AFBF48DDA444D29");

            entity.ToTable("Auth_User_Role");

            entity.Property(e => e.SeqNo).HasComment("自增");
            entity.Property(e => e.AddTime)
                .HasComment("新增時間")
                .HasColumnType("datetime");
            entity.Property(e => e.AddUserId)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("新增員工");
            entity.Property(e => e.RoleId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("關聯Auth_Role");
            entity.Property(e => e.UserId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("使用者帳號");
        });

        modelBuilder.Entity<ReviewerApplyCreditCardInfoAddress>(entity =>
        {
            entity.HasKey(e => new { e.ApplyNo, e.AddressType }).HasName("PK_Reviewer_CreditCardInfo_Address");

            entity.ToTable("Reviewer_ApplyCreditCardInfoAddress");

            entity.Property(e => e.ApplyNo)
                .HasMaxLength(13)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("申請書編號");
            entity.Property(e => e.AddressType).HasComment("地址類型\r\n1. 正卡人戶籍地址\r\n2. 正卡人居住地址\r\n3. 正卡人公司地址\r\n4. 正卡人家長地址\r\n5. 附卡人寄件地址\r\n");
            entity.Property(e => e.Alley)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasComment("弄");
            entity.Property(e => e.City)
                .IsRequired()
                .HasMaxLength(10)
                .HasComment("縣市");
            entity.Property(e => e.CompId)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasComment("公司統一編號")
                .HasColumnName("CompID");
            entity.Property(e => e.District)
                .IsRequired()
                .HasMaxLength(10)
                .HasComment("區域");
            entity.Property(e => e.Floor)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasComment("樓層");
            entity.Property(e => e.Id)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("身分證字號，當地址類型為 1、2、4、5需有值")
                .HasColumnName("ID");
            entity.Property(e => e.Lane)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasComment("巷");
            entity.Property(e => e.Number)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasComment("號");
            entity.Property(e => e.Other)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasComment("其他");
            entity.Property(e => e.Road)
                .IsRequired()
                .HasMaxLength(10)
                .HasComment("街道");
            entity.Property(e => e.SubNumber)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasComment("號2");
            entity.Property(e => e.ZipCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("郵遞區號");
        });

        modelBuilder.Entity<ReviewerApplyCreditCardInfoPrimary>(entity =>
        {
            entity.HasKey(e => e.ApplyNo).HasName("PK_Reviewer_CreditCardInfo_Primary");

            entity.ToTable("Reviewer_ApplyCreditCardInfoPrimary");

            entity.Property(e => e.ApplyNo)
                .HasMaxLength(13)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("申請書編號：範例20180625A0001");
            entity.Property(e => e.AcceptType).HasComment("進件方式\r\n1. 親訪親簽\r\n2. 親訪未見親簽\r\n3. 設攤親簽\r\n4. 設為未見親簽\r\n5. 自來件\r\n6. 電話行銷\r\n");
            entity.Property(e => e.AliNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("安麗編號");
            entity.Property(e => e.AmljobLevelCode)
                .HasComment("AML職級別：關聯 SetUp_AMLJobLevel")
                .HasColumnName("AMLJobLevelCode");
            entity.Property(e => e.AmlprofessionCode)
                .HasComment("AML職業別：關聯  SetUp_AMLProfession")
                .HasColumnName("AMLProfessionCode");
            entity.Property(e => e.AmlprofessionCodeVersion)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasComment("AML職業別版本、關聯SetUp_AMLProfession")
                .HasColumnName("AMLProfessionCode_Version");
            entity.Property(e => e.AmlprofessionOther)
                .HasMaxLength(20)
                .HasComment("AML職業別_其他")
                .HasColumnName("AMLProfessionOther");
            entity.Property(e => e.AmlriskLevel)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasComment("洗防風險等級：由AML-KYC提供風險等級")
                .HasColumnName("AMLRiskLevel");
            entity.Property(e => e.ApplicationFileName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("申請書檔名");
            entity.Property(e => e.ApplyCardKind).HasComment("申請卡種 ( 1: 實體, 2: 數位, 3: 實體+數位)");
            entity.Property(e => e.ApplyCardType)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("申請卡別：以'/'串接，如JA00/JC00，關聯　SetUp_Card");
            entity.Property(e => e.ApplyDate)
                .HasComment("申請日期")
                .HasColumnType("datetime");
            entity.Property(e => e.ApproveEmpNo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("核准人員員編");
            entity.Property(e => e.AutoDeductionBankAccount)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("自動扣繳帳戶-銀行存摺帳號");
            entity.Property(e => e.AutoDeductionPayType).HasComment("自動扣繳帳戶-扣款方式 (10,最低 20,全額)");
            entity.Property(e => e.B68unsecuredCreditAmount)
                .HasComment("B68無擔保掛帳金額")
                .HasColumnName("B68UnsecuredCreditAmount");
            entity.Property(e => e.BillAddress).HasComment("帳單地址：1. 同戶籍, 2. 同居住, 3. 公司");
            entity.Property(e => e.BillType).HasComment("帳單形式 (1：電子帳單、2：簡訊帳單、3：紙本帳單、4：LINE帳單\r\n)");
            entity.Property(e => e.BirthCitizenshipCode).HasComment("出生地國籍：1. 中華民國 2. 其他");
            entity.Property(e => e.BirthCitizenshipCodeOther)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasComment("出生地國籍_其他：當出生地國籍為其他時使用");
            entity.Property(e => e.BirthDay)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("生日：民國格式為 YYYMMDD");
            entity.Property(e => e.BlackListNote)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("黑名單註記：查詢paperless內建資料庫是否有資料相符情形 / Y 、N");
            entity.Property(e => e.BranchCustomer)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("分行客戶：用API方式以查詢分行平台資料，分行平台資訊來源為資訊部，Y 、N");
            entity.Property(e => e.CardOwner).HasComment("正附卡：1. 正卡 2. 附卡 3. 正卡+附卡 4. 附卡2  5. 正卡+附卡2");
            entity.Property(e => e.CardStatus).HasComment("卡片狀態，查看附件-卡片狀態碼");
            entity.Property(e => e.CaseType).HasComment("案件種類，如一般件");
            entity.Property(e => e.Checked929)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("用API方式以身分證字號查詢資料庫，檢核是否命中情形，資料庫來源為業務管理部 / Y 、N");
            entity.Property(e => e.Chname)
                .IsRequired()
                .HasMaxLength(30)
                .HasComment("中文姓名")
                .HasColumnName("CHName");
            entity.Property(e => e.CitizenshipCode)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasComment("國籍：關聯 SetUp_Citizenship");
            entity.Property(e => e.CompId)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasComment("公司統一編號")
                .HasColumnName("CompID");
            entity.Property(e => e.CompJobLevel).HasComment("公司職級別\r\n1. 駕駛人員\r\n2. 服務生/門市人員\r\n3. 專業人員\r\n4. 專業技工\r\n5. 業務人員\r\n6. 一般職員\r\n7. 主管階層\r\n8. 股東/董事/負責人\r\n9. 家管/其他\r\n");
            entity.Property(e => e.CompJobTitle)
                .HasMaxLength(20)
                .HasComment("公司職稱");
            entity.Property(e => e.CompName)
                .HasMaxLength(30)
                .HasComment("公司名稱");
            entity.Property(e => e.CompPhone)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("公司電話");
            entity.Property(e => e.CompSeniority).HasComment("公司年資");
            entity.Property(e => e.CompTrade).HasComment("公司行業別\r\n1. 營造/製造/運輸業\r\n2. 一般商業\r\n3. 休閒/娛樂/服務業\r\n4. 軍警消防業\r\n5. 非營利團體\r\n6. 學生\r\n7. 自由業/其他\r\n");
            entity.Property(e => e.CreditCheckCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasComment("徵信代碼：如A02為原卡友，關聯SetUp_");
            entity.Property(e => e.CreditLimitRatingAdvice)
                .HasComment("評分結果：從授信政策科")
                .HasColumnName("CreditLimit_RatingAdvice");
            entity.Property(e => e.CurrentMonthIncome).HasComment("現職月收入(元)");
            entity.Property(e => e.CustomerServiceNotes)
                .HasMaxLength(100)
                .HasComment("客服備註");
            entity.Property(e => e.CustomerSpecialNotes)
                .HasMaxLength(100)
                .HasComment("客戶特殊註記");
            entity.Property(e => e.Education).HasComment("教育程度：1. 博士, 2. 碩士, 3. 大學, 4. 專科, 5. 高中職, 6. 其他");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("E-MAIL")
                .HasColumnName("EMail");
            entity.Property(e => e.Enname)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("英文名稱")
                .HasColumnName("ENName");
            entity.Property(e => e.ExpatValidityPeriod)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasComment("外籍人士停留期限 (格式: YYYYMMDD)");
            entity.Property(e => e.FamilyMessageChecked)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("家族訊息正/附卡：資料來源總行業管部自建資料庫 / Y 、N");
            entity.Property(e => e.FirstBrushingGiftCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("首刷禮代碼 (E-CARD填寫)");
            entity.Property(e => e.FormCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("表單代號 (表單學習用，由資處定義)");
            entity.Property(e => e.GraduatedElementarySchool)
                .HasMaxLength(10)
                .HasComment("畢業國小");
            entity.Property(e => e.HouseRegPhone)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasComment("戶籍電話");
            entity.Property(e => e.Id)
                .IsRequired()
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("身份證字號")
                .HasColumnName("ID");
            entity.Property(e => e.IdcardRenewalLocationCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("身分證發證地點：關聯 SetUp_IDCardRenewalLocation")
                .HasColumnName("IDCardRenewalLocationCode");
            entity.Property(e => e.IdcheckResultChecked)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("身分證驗證結果-正/附卡：聯徵查回後會有相關資訊可入")
                .HasColumnName("IDCheckResultChecked");
            entity.Property(e => e.IdissueDate)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("身分證發證日期：民國格式為 YYYMMDD")
                .HasColumnName("IDIssueDate");
            entity.Property(e => e.IdtakeStatus)
                .HasComment("身分證請領狀態：1. 初發, 2. 補發, 3. 換發")
                .HasColumnName("IDTakeStatus");
            entity.Property(e => e.Idtype)
                .HasComment("身份別：1. 新戶 2.原持卡人 3. 卡友 4. 存戶 5. 持他行卡 6. 自然人憑證")
                .HasColumnName("IDType");
            entity.Property(e => e.Ipchecked)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("IP比對結果 (Y/N)")
                .HasColumnName("IPChecked");
            entity.Property(e => e.IsAcceptEasyCardDefaultBonus)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("是否同意悠遊卡自動加值預設設定 (Y: 是, N: 否)");
            entity.Property(e => e.IsAgreeDataOpen)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("本人是否同意提供資料予聯名認同集團 (Y: 是, N: 否)");
            entity.Property(e => e.IsAgreeMarketing)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("是否同意提供資料供本行進行行銷 (Y: 是, N: 否)");
            entity.Property(e => e.IsApplyAutoDeduction)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("是否申請自動扣款 (Y: 是, N: 否)");
            entity.Property(e => e.IsConvertCard)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("是否轉換卡別：Y、N，紙本案件，申請書上可幫客人轉換卡別");
            entity.Property(e => e.IsCurrentPositionRelatedPepposition)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("現任職位是否與PEP職位相關 (Y/N)，敦陽系統黑名單是否相符= Y 和 姓名檢核 = Y 需填寫")
                .HasColumnName("IsCurrentPositionRelatedPEPPosition");
            entity.Property(e => e.IsDunyangBlackList)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("敦陽系統黑名單查詢記錄 (Y/N)");
            entity.Property(e => e.IsEqualFastCaseEmail)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("快辦件E-Mail相同 (Y: 是, N: 否)");
            entity.Property(e => e.IsEqualFastCaseMobile)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("快辦件手機號碼相同 (Y: 是, N: 否)");
            entity.Property(e => e.IsEqualInternalIp)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("與行內IP相同 (Y: 是, N: 否)")
                .HasColumnName("IsEqualInternalIP");
            entity.Property(e => e.IsFatcaidentity)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("是否FATCA身份 (Y/N)，當國籍 = 美國時候預設為 Y")
                .HasColumnName("IsFATCAIdentity");
            entity.Property(e => e.IsForeverResidencePermit)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("是否為永久居留證\r\n1. 配合法遵部政策，新增欄位。\r\n2. 欄位用拉霸方式選擇，Y/N，預設為N。\r\n3. 如為{N}，則須鍵入外籍人士指定效期。\r\n");
            entity.Property(e => e.IsPayNoticeBind)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("是否綁定消費通知 (Y: 是, N: 否)");
            entity.Property(e => e.IsRepeatApply)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("是否重複申請件：此欄位包含申請人是否曾有申請本行信用卡+現在是否為本行信用卡流通戶 / Y 、N");
            entity.Property(e => e.IsStudent)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("是否學生身份 (Y: 是, N: 否)");
            entity.Property(e => e.IsrcaforCurrentPrp)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("當前或曾為PEP身分 (Y/N)，敦陽系統黑名單是否相符= Y 和 姓名檢核 = Y 需填寫")
                .HasColumnName("ISRCAForCurrentPRP");
            entity.Property(e => e.LiveOwner).HasComment("居住地所有權人：1. 本人, 2. 配偶, 3. 父母, 4. 子女, 5. 親戚, 6. 朋友, 7. 其他");
            entity.Property(e => e.LivePhone)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasComment("居住電話");
            entity.Property(e => e.LiveYear).HasComment("居住年數");
            entity.Property(e => e.LongTerm)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("長循分期戶 ： Y 、N");
            entity.Property(e => e.MainIncomeAndFundCodes)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("所得及資金來源 (請參考Setup_MainIncomeAndFund表格、需符合Paperless「主要所得及資金來源勾選」，多選選項以逗號(,)區隔)");
            entity.Property(e => e.MainIncomeAndFundOther)
                .HasMaxLength(30)
                .HasComment("主要收入_其他");
            entity.Property(e => e.MarriageState).HasComment("婚姻狀況：1. 已婚, 2. 未婚, 3. 其他");
            entity.Property(e => e.Mobile)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("行動電話");
            entity.Property(e => e.MyDataCaseNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("MyData案件編號：當附件註記為2：MYDATA後補時，本欄位必定有值");
            entity.Property(e => e.NameChecked)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("姓名核驗正附卡 ：1. 於敦陽系統之姓名檢核   2. Y 、N");
            entity.Property(e => e.NameCheckedReasonCode).HasComment("姓名檢核理由代碼，敦陽系統黑名單是否相符= Y 和 姓名檢核 = Y 要有理由碼\r\n1. PEP\r\n2. 要再問\r\n3. 黑名單\r\n4. 負面新聞\r\n5. 無\r\n6. RCA\r\n7. 國內PEP\r\n8. 國外PEP\r\n9. 國際組織PEP\r\n10. 卸任PEP\r\n");
            entity.Property(e => e.OriginCardholderJcicnotes)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("1. 現由文彬依聯徵查回結果提供 2. Y 、N")
                .HasColumnName("OriginCardholderJCICNotes");
            entity.Property(e => e.Otpmobile)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("OTP手機號碼 (E-CARD填寫)")
                .HasColumnName("OTPMobile");
            entity.Property(e => e.Otptime)
                .HasComment("OTP時間 (E-CARD填寫)")
                .HasColumnType("datetime")
                .HasColumnName("OTPTime");
            entity.Property(e => e.ParentName)
                .HasMaxLength(30)
                .HasComment("家長姓名");
            entity.Property(e => e.ParentPhone)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("家長電話 (可以行動電話或家電電話)");
            entity.Property(e => e.PassportDate)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasComment("護照日期 (格式: YYYYMMDD)");
            entity.Property(e => e.PassportNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("護照號碼");
            entity.Property(e => e.Peprange)
                .HasComment("擔任PEP範圍:\r\n不滿2年\r\n滿兩年但不滿四年\r\n滿4年 / 敦陽系統黑名單是否相符= Y 和 姓名檢核 = Y 需填寫")
                .HasColumnName("PEPRange");
            entity.Property(e => e.ProjectCode)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasComment("專案代號 (請參考Setup_ProjectCode)");
            entity.Property(e => e.PromotionUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("推廣單位");
            entity.Property(e => e.PromotionUser)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("推廣人員");
            entity.Property(e => e.ResidencePermitBackendNum)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("居留證背面號碼：前兩碼大寫英文 + 8 碼數字，範例ＹＺ80000001");
            entity.Property(e => e.ResidencePermitDeadline)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("居留證期限：格式 YYYYMMDD");
            entity.Property(e => e.ResidencePermitIssueDate)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("居留證發證日期 (格式: YYYYMMDD)");
            entity.Property(e => e.ResignPepkind)
                .HasComment("卸任PEP種類：1. 國內 2.國外 3.國際組織 / 敦陽系統黑名單是否相符= Y 和 姓名檢核 = Y 需填寫")
                .HasColumnName("ResignPEPKind");
            entity.Property(e => e.ReviewerEmpNo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("審查人員編號");
            entity.Property(e => e.SendCardAddress).HasComment("寄卡地址");
            entity.Property(e => e.Sex).HasComment("性別：1.男生 2. 女生");
            entity.Property(e => e.SocialSecurityCode)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("社會安全號碼，FATCA身份=Y，徵審人員會去跟客人要此值");
            entity.Property(e => e.Source).HasComment("來源：1: Ecard, 2: APP, 3: 紙本");
            entity.Property(e => e.StudScheduledGraduationDate)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("學生預定畢業日期 (IsStudent = Y 才有值, 格式: YYYYMMDD)");
            entity.Property(e => e.StudSchool)
                .HasMaxLength(30)
                .HasComment("學生就讀學校 (IsStudent = Y 才有值)");
            entity.Property(e => e.StudentApplicantRelationship).HasComment("學生申請人與本人關係 (1: 父母, 2: 學生)");
            entity.Property(e => e.UserSourceIp)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasComment("使用者來源IP位置 (E-CARD填寫)")
                .HasColumnName("UserSourceIP");
            entity.Property(e => e.WarningListChecked)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("用API方式以身分證字號查詢資料庫，檢核是否命中情形，資料庫來源為法令遵循部 / Y 、N");
        });

        modelBuilder.Entity<ReviewerApplyCreditCardInfoSupplementary>(entity =>
        {
            entity.HasKey(e => new { e.ApplyNo, e.Id }).HasName("PK_Reviewer_CreditCardInfo_Supplementary");

            entity.ToTable("Reviewer_ApplyCreditCardInfoSupplementary");

            entity.Property(e => e.ApplyNo)
                .HasMaxLength(13)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("申請書編號");
            entity.Property(e => e.Id)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("身分證字號")
                .HasColumnName("ID");
            entity.Property(e => e.ApplicantRelationship).HasComment("與正卡人關係");
            entity.Property(e => e.BirthCitizenshipCode)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasComment("出生地國籍：1. 中華民國 2. 其他");
            entity.Property(e => e.BirthCitizenshipOther)
                .HasMaxLength(10)
                .HasComment("出生地國籍_其他：當出生地國籍為其他時使用");
            entity.Property(e => e.BirthDay)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("生日：民國格式為 YYYMMDD");
            entity.Property(e => e.Chname)
                .IsRequired()
                .HasMaxLength(30)
                .HasComment("中文姓名")
                .HasColumnName("CHName");
            entity.Property(e => e.CitizenshipCode)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasComment("國籍：關聯 SetUp_Citizenship");
            entity.Property(e => e.Enname)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("英文姓名")
                .HasColumnName("ENName");
            entity.Property(e => e.ExpatValidityPeriod)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasComment("外籍人士准居效期");
            entity.Property(e => e.IdcardRenewalLocationCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("身分證發證地點：關聯 SetUp_IDCardRenewalLocation")
                .HasColumnName("IDCardRenewalLocationCode");
            entity.Property(e => e.IdissueDate)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("身分證發證日期：民國格式為 YYYMMDD")
                .HasColumnName("IDIssueDate");
            entity.Property(e => e.IdtakeStatus)
                .HasComment("身分證護照種類：1. 初發, 2. 補發, 3. 換發")
                .HasColumnName("IDTakeStatus");
            entity.Property(e => e.IsDunyangBlackList)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("敦陽系統黑名單是否符合(Y/N)");
            entity.Property(e => e.IsFatcaidentity)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("是否FATCA身份 (Y/N)")
                .HasColumnName("IsFATCAIdentity");
            entity.Property(e => e.MarriageState).HasComment("婚姻狀況：1. 已婚, 2. 未婚, 3. 其他");
            entity.Property(e => e.Mobile)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("行動電話");
            entity.Property(e => e.PassportDate)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasComment("護照日期 (格式: YYYYMMDD)");
            entity.Property(e => e.PassportNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("護照號碼");
            entity.Property(e => e.Phone)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("電話，可手機 / 行動電話");
            entity.Property(e => e.ReasonCode)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("理由碼");
            entity.Property(e => e.ResidencePermitIssueDate)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("居居留證發證日期 (格式: YYYYMMDD)");
            entity.Property(e => e.Sex).HasComment("性別：1.男生 2. 女生");
            entity.Property(e => e.SocialSecurityCode)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("社會安全碼");
        });

        modelBuilder.Entity<ReviewerPeddingApplyCardCheckJobForNotA02>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ReviewerPedding_ApplyCardCheckJobForNotA02", tb => tb.HasComment("徵審待辦_申請信用卡任務非原卡友"));

            entity.Property(e => e.AddTime)
                .HasComment("創建時間")
                .HasColumnType("datetime");
            entity.Property(e => e.ApplyNo)
                .IsRequired()
                .HasMaxLength(13)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("E-CARD申請書編號，\r\n對應 E-CARD = APPLY_NO\r\nIDType = 空白= 金融小白，受理編號中會有 X\r\nIDType = 存戶與卡友，受理編號中會有 B\r\n");
            entity.Property(e => e.Check929LastTime)
                .HasComment("發查929最後時間")
                .HasColumnType("datetime");
            entity.Property(e => e.CheckEqualInternalIplastTime)
                .HasComment("檢查行內IP最後時間")
                .HasColumnType("datetime")
                .HasColumnName("CheckEqualInternalIPLastTime");
            entity.Property(e => e.CheckNameLastTime)
                .HasComment("查敦陽姓名檢核最後時間")
                .HasColumnType("datetime");
            entity.Property(e => e.CheckSameIplastTime)
                .HasComment("檢查相同IP最後時間")
                .HasColumnType("datetime")
                .HasColumnName("CheckSameIPLastTime");
            entity.Property(e => e.CheckWarningListLastTime)
                .HasComment("發查告誡最後時間")
                .HasColumnType("datetime");
            entity.Property(e => e.GetFileLastTime)
                .HasComment("取得檔案最後時間")
                .HasColumnType("datetime");
            entity.Property(e => e.GetMydatalastTime)
                .HasComment("取得MyData最後時間")
                .HasColumnType("datetime")
                .HasColumnName("GetMYDATALastTime");
            entity.Property(e => e.IsCheck929)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasComment("是否發查929，\r\nY｜N\r\n預設 N");
            entity.Property(e => e.IsCheckEqualInternalIp)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasComment("是否檢查行內IP，\r\nY｜N\r\n預設 N")
                .HasColumnName("IsCheckEqualInternalIP");
            entity.Property(e => e.IsCheckLock)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasComment("是否檢查鎖住，\r\n排程每次執行需鎖住Y，如果檢驗失敗須將此表還原為Ｎ\r\n預設 N\r\nY｜N\r\n");
            entity.Property(e => e.IsCheckName)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasComment("是否發查敦陽姓名檢核，\r\nY｜N\r\n預設 N\r\n");
            entity.Property(e => e.IsCheckSameIp)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasComment("是否檢查相同IP，\r\nY｜N\r\n預設 N")
                .HasColumnName("IsCheckSameIP");
            entity.Property(e => e.IsCheckWarningList)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasComment("是否發查告誡，\r\nY｜N\r\n預設 N");
            entity.Property(e => e.IsChecked)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasComment("是否檢驗完畢，\r\nY｜N\r\n預設Ｎ");
            entity.Property(e => e.IsErrorLock)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasComment("錯誤鎖定，\r\nY｜N\r\n預設 N\r\n當錯誤達2次鎖定,需人工打開才能繼續檢核\r\n");
            entity.Property(e => e.IsGetFile)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasComment("是否取得檔案，\r\nY｜N\r\n需儲存所有申請書附件\r\n預設Ｎ");
            entity.Property(e => e.IsGetFileLock)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasComment("是否取得檔案鎖住，\r\nY｜N\r\n預設Ｎ");
            entity.Property(e => e.IsGetMydatasuccess)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("MyData是否取得成功，Y｜N")
                .HasColumnName("IsGetMYDATASuccess");
            entity.Property(e => e.IsNeedGetMydata)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("是否需要取得MyData，Y｜N")
                .HasColumnName("IsNeedGetMYDATA");
            entity.Property(e => e.IsQueryBranchInfo)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasComment("是否查詢分行資訊，\r\nY｜N\r\n預設 N");
            entity.Property(e => e.IsTransfer)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasComment("是否轉移，\r\nY｜N\r\n預設 N\r\n此為結案意思\r\n");
            entity.Property(e => e.IsTransferTime)
                .HasComment("轉移時間")
                .HasColumnType("datetime");
            entity.Property(e => e.QueryBranchInfoLastTime)
                .HasComment("查詢分行資訊最後時間")
                .HasColumnType("datetime");
            entity.Property(e => e.國旅人士名冊確認)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("國旅人士名冊確認，Y｜N");
            entity.Property(e => e.國旅人士名冊確認最後時間)
                .HasComment("國旅人士名冊確認最後時間")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<ReviewerPeddingApplyCardCheckJobForNotA02ErrorLog>(entity =>
        {
            entity.HasKey(e => e.SeqNo);

            entity.ToTable("ReviewerPedding_ApplyCardCheckJobForNotA02_ErrorLog", tb => tb.HasComment("徵審代辦申請信用卡任務非原卡友_錯誤Log"));

            entity.Property(e => e.SeqNo).HasComment("PK，字增");
            entity.Property(e => e.AddTime)
                .HasComment("創建時間")
                .HasColumnType("datetime");
            entity.Property(e => e.ApplyNo)
                .IsRequired()
                .HasMaxLength(13)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("E-CARD申請書編號，\r\n與ReviewerPedding_ApplyCardCheckJobForNotA02 關聯");
            entity.Property(e => e.ErrorMesaage)
                .IsRequired()
                .HasComment("錯誤訊息");
        });

        modelBuilder.Entity<ReviewerPeddingApplyCreditCardInfoAddress>(entity =>
        {
            entity.HasKey(e => new { e.ApplyNo, e.AddressType }).HasName("PK_ReviewerPedding_ApplyCreditCardInfoAddress_1");

            entity.ToTable("ReviewerPedding_ApplyCreditCardInfoAddress", tb => tb.HasComment("徵審待辦_申請信用卡地址資料"));

            entity.Property(e => e.ApplyNo)
                .HasMaxLength(13)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("申請書編號，PK");
            entity.Property(e => e.AddressType).HasComment("地址類型，\r\n1.正卡人戶籍地址\r\n2.正卡人居住地址\r\n3.正卡人公司地址\r\n4.正卡人家長地址\r\n");
            entity.Property(e => e.Alley)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasComment("弄");
            entity.Property(e => e.City)
                .IsRequired()
                .HasMaxLength(10)
                .HasComment("縣市");
            entity.Property(e => e.CompId)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasComment("公司統一編號，當地址類型為 5需有值")
                .HasColumnName("CompID");
            entity.Property(e => e.District)
                .IsRequired()
                .HasMaxLength(10)
                .HasComment("區域");
            entity.Property(e => e.Floor)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasComment("樓層");
            entity.Property(e => e.Id)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("身分證字號，當地址類型為 1、2、4、5需有值")
                .HasColumnName("ID");
            entity.Property(e => e.Lane)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasComment("巷");
            entity.Property(e => e.Number)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasComment("號");
            entity.Property(e => e.Other)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasComment("其他");
            entity.Property(e => e.Road)
                .IsRequired()
                .HasMaxLength(10)
                .HasComment("街道");
            entity.Property(e => e.SubNumber)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasComment("之號");
            entity.Property(e => e.ZipCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("郵遞區號");
        });

        modelBuilder.Entity<ReviewerPeddingApplyCreditCardInfoPrimary>(entity =>
        {
            entity.HasKey(e => e.ApplyNo);

            entity.ToTable("ReviewerPedding_ApplyCreditCardInfoPrimary", tb => tb.HasComment("徵審待辦_申請信用卡正卡人資料"));

            entity.Property(e => e.ApplyNo)
                .HasMaxLength(13)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("E-CARD申請書編號，\r\n對應 E-CARD = APPLY_NO\r\nIDType = 空白= 金融小白，受理編號中會有 X\r\nIDType = 存戶與卡友，受理編號中會有 B");
            entity.Property(e => e.AmljobLevelCode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("AML職級別，\r\n由徵審系統提供值給E-CARD\r\n關聯 SetUp_AMLJobLevel\r\n對應 E-CARD = JOB_LV")
                .HasColumnName("AMLJobLevelCode");
            entity.Property(e => e.AmlprofessionCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasComment("AML職業別，\r\n由徵審系統提供值給E-CARD\r\n關聯 SetUp_AMLProfession\r\n對應 E-CARD = JOB_TYPE")
                .HasColumnName("AMLProfessionCode");
            entity.Property(e => e.AmlprofessionOther)
                .HasMaxLength(50)
                .HasComment("AML職業別_其他，對應 E-CARD = JOB_TYPE_OTHER")
                .HasColumnName("AMLProfessionOther");
            entity.Property(e => e.AnliNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasComment("安麗直銷商編號，對應 E-CARD = AL_NO");
            entity.Property(e => e.AppendixFileName01)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("附件檔名1，\r\n空值，上述申請書檔名對應到後，ApplyFile.idPic1二進位資料即為附件1檔案。\r\n\r\n")
                .HasColumnName("AppendixFileName_01");
            entity.Property(e => e.AppendixFileName02)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("附件檔名2，\r\n空值，上述申請書檔名對應到後，ApplyFile.idPic2二進位資料即為附件2檔案。\r\n\r\n")
                .HasColumnName("AppendixFileName_02");
            entity.Property(e => e.AppendixFileName03)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("附件檔名3，\r\n空值，上述申請書檔名對應到後，ApplyFile.upload1二進位資料即為附件3檔案。\r\n\r\n")
                .HasColumnName("AppendixFileName_03");
            entity.Property(e => e.AppendixFileName04)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("附件檔名4，\r\n空值，上述申請書檔名對應到後，ApplyFile.upload2二進位資料即為附件4檔案。\r\n\r\n")
                .HasColumnName("AppendixFileName_04");
            entity.Property(e => e.AppendixFileName05)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("附件檔名5，\r\n空值，上述申請書檔名對應到後，ApplyFile.upload3二進位資料即為附件5檔案。")
                .HasColumnName("AppendixFileName_05");
            entity.Property(e => e.AppendixFileName06)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("附件檔名6，\r\n空值，上述申請書檔名對應到後，ApplyFile.upload4二進位資料即為附件6檔案。")
                .HasColumnName("AppendixFileName_06");
            entity.Property(e => e.AppendixFileName07)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("附件檔名7，\r\n空值，上述申請書檔名對應到後，ApplyFile.upload5二進位資料即為附件7檔案。")
                .HasColumnName("AppendixFileName_07");
            entity.Property(e => e.AppendixFileName08)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("附件檔名8，\r\n空值，上述申請書檔名對應到後，ApplyFile.upload6二進位資料即為附件8檔案。")
                .HasColumnName("AppendixFileName_08");
            entity.Property(e => e.ApplicationFileName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("申請書檔名，對應 E-CARD = APPLICATION_FILE_NAME");
            entity.Property(e => e.ApplyCardKind)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("申請卡種，\r\n對應 E-CARD = CARD_KIND\r\n1.實體\r\n2.數位\r\n3.實體+數位\r\n\r\n");
            entity.Property(e => e.ApplyCardType)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("申請卡別，\r\nE-CARD 帶入可多選欄位，如多選資料以/相隔，例如：JA00/JC00。\r\n關聯 SetUp_Card\r\n對應 E-CARD = MCARD_SER");
            entity.Property(e => e.AttachmentNotes)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("附件註記，對應 E-CARD = APPENDIX_FLG\r\n1.附件異常\r\n2.MYDATA後補");
            entity.Property(e => e.AutoDeductionBankAccount)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasComment("自動扣繳用戶＿銀行存款帳號，\r\n對應 E-CARD = ACCT_NO\r\nY：是\r\nN：否");
            entity.Property(e => e.AutoDeductionPayType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("自動扣繳用戶＿繳款方式，\r\n對應 E-CARD = PAY_WAY\r\n10.最低\r\n20.全額");
            entity.Property(e => e.BalanceUpdateDate)
                .HasComment("餘額更新日期，對應 E-CARD = BAL_UPD_DATE")
                .HasColumnType("datetime");
            entity.Property(e => e.BillAddress)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("正卡_身分證請領狀態，\r\n1.同戶籍\r\n2.同居住\r\n3.同公司\r\n對應 E-CARD = BILL_TO_ADDR");
            entity.Property(e => e.BillType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("帳單形式，\r\n1：電子帳單\r\n2：簡訊帳單\r\n3：紙本帳單\r\n4：LINE帳單\r\n對應 E-CARD = BILL_TYPE\r\n\r\n");
            entity.Property(e => e.BirthDay)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("正卡_出生年月日，\r\n目前系統是請他提供YYYMMDD\r\n對應 E-CARD = BIRTHDAY");
            entity.Property(e => e.BirthPlace)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasComment("正卡_出生地，\r\nECARD 值如果是台灣要對應台灣縣市，如果是外國人則是其他\r\n對應 E-CARD = BIRTH_PLACE");
            entity.Property(e => e.BirthPlaceOther)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasComment("正卡_出生地_其他，\r\n當出生地為其他時候需要有值\r\n關聯 SetUp_Citizenship\r\n對應 E-CARD = BIRTH_PLACE_OTHER");
            entity.Property(e => e.CardAddr)
                .IsRequired()
                .HasMaxLength(120)
                .HasComment("正卡地址，\r\n對應 E-CARD = CARD_ADDR");
            entity.Property(e => e.CardOwner)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("正附卡，\r\n依客人申請帶出，現網路申請僅能申請正卡\r\n對應 E-CARD = CARD_OWNER\r\n1.正卡\r\n2.附卡\r\n3.正卡+附卡\r\n4.附卡2\r\n5.正卡+附卡2");
            entity.Property(e => e.Chname)
                .IsRequired()
                .HasMaxLength(30)
                .HasComment("正卡_中文姓名，對應 E-CARD = CH_NAME")
                .HasColumnName("CHName");
            entity.Property(e => e.CitizenshipCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasComment("正卡_國籍，\r\n由徵審系統提供值給E-CARD\r\n關聯 SetUp_Citizenship\r\n對應 E-CARD = NATIONALITY");
            entity.Property(e => e.CompId)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasComment("統一編號，對應 E-CARD = COMP_ID\r\n8位數字")
                .HasColumnName("CompID");
            entity.Property(e => e.CompJobTitle)
                .HasMaxLength(30)
                .HasComment("職稱，對應 E-CARD = JOB_TITLE");
            entity.Property(e => e.CompName)
                .HasMaxLength(30)
                .HasComment("公司名稱，對應 E-CARD = COMP_NAME");
            entity.Property(e => e.CompPhone)
                .HasMaxLength(21)
                .IsUnicode(false)
                .HasComment("公司電話，對應 E-CARD = COMP_TEL_NO\r\n\r\n");
            entity.Property(e => e.CompSeniority)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasComment("年資，對應 E-CARD = JOB_YEAR\r\n檢驗為數字");
            entity.Property(e => e.CreditCheckCode)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasComment("徵信代碼，\r\n如是E-CARD帶入為原卡友值為A02，否則為空值\r\n關聯 SetUp_CreditCheckCode\r\n對應 E-CARD = CREDIT_ID");
            entity.Property(e => e.CurrentMonthIncome)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasComment("現職月收入(元)\r\n對應 E-CARD = SALARY\r\n檢驗數字");
            entity.Property(e => e.DingcunBalance)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasComment("定存目前餘額，對應 E-CARD =TIME_CURR_BAL\r\n檢驗要為數字")
                .HasColumnName("DINGCUN_Balance");
            entity.Property(e => e.DingcunBalance90)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasComment("定存90天平均餘額，對應 E-CARD = TIME_90DAY_BAL\r\n檢驗要為數字")
                .HasColumnName("DINGCUN_Balance_90");
            entity.Property(e => e.EcardUuid)
                .HasComment("ECARD_UUID，對應 E-CARD = UUID\r\n\r\n")
                .HasColumnName("ECARD_UUID");
            entity.Property(e => e.Education)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("教育程度，\r\n1.博士\r\n2.碩士\r\n3.大學\r\n4.專科\r\n5.高中高職\r\n6.其他\r\n對應 E-CARD = EDUCATION");
            entity.Property(e => e.Email)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("正卡_E-MAIL，對應 E-CARD = EMAIL")
                .HasColumnName("EMail");
            entity.Property(e => e.Enname)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("正卡_英文姓名，對應 E-CARD = ENG_NAME")
                .HasColumnName("ENName");
            entity.Property(e => e.FirstBrushingGiftCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasComment("首刷禮代碼，\r\n原系統是使用家庭成員6年齡\r\n對應 E-CARD = FAMILY6_AGE");
            entity.Property(e => e.FormCode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("表單代碼，\r\nE-CARD提供\r\n表單學習用，由資處定義\r\n對應 E-CARD = FORM_ID");
            entity.Property(e => e.GraduatedElementarySchool)
                .IsRequired()
                .HasMaxLength(16)
                .HasComment("畢業國小，對應 E-CARD = PRIMARY_SCHOOL");
            entity.Property(e => e.HouseRegPhone)
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasComment("戶籍電話，對應 E-CARD = REG_TEL_NO");
            entity.Property(e => e.HouseholdRegTransferCardForTaoyuanCitizenCard)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("戶籍遷出轉卡（桃園市民卡用），\r\nY：同意\r\nN：不同意\r\n對應 E-CARD = CHG_CARD_ADDR\r\n\r\n");
            entity.Property(e => e.HuocunBalance)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasComment("活存目前餘額，對應 E-CARD = DEMAND_CURR_BAL\r\n檢驗要為數字")
                .HasColumnName("HUOCUN_Balance");
            entity.Property(e => e.HuocunBalance90)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasComment("活存90天平均餘額，對應 E-CARD = DEMAND_90DAY_BAL\r\n檢驗要為數字")
                .HasColumnName("HUOCUN_Balance_90");
            entity.Property(e => e.Id)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("正卡_身分證字號，對應 E-CARD = P_ID")
                .HasColumnName("ID");
            entity.Property(e => e.IdcardRenewalLocationName)
                .HasMaxLength(3)
                .HasComment("正卡_身分證發證地點，\r\nEcard給中文\r\n關聯 SetUp_IDCardRenewalLocation\r\n對應 E-CARD = P_ID_GETADDRNAME")
                .HasColumnName("IDCardRenewalLocationName");
            entity.Property(e => e.IdissueDate)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("正卡_身分證發證日期，\r\n民國 YYYMMDD \r\n對應 E-CARD = P_ID_GETDATE")
                .HasColumnName("IDIssueDate");
            entity.Property(e => e.IdtakeStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("正卡_身分證請領狀態，\r\n1.初發\r\n2.補發\r\n3.換發\r\n對應 E-CARD = P_ID_STATUS")
                .HasColumnName("IDTakeStatus");
            entity.Property(e => e.Idtype)
                .HasMaxLength(10)
                .HasComment("身份別，\r\n1.卡友\r\n2.存戶\r\n3.持他行卡\r\n4.自然人憑證\r\nE-CARD提供-卡友、存戶、持他行卡、自然人憑證\r\n對應 E-CARD = ID_TYPE\r\n")
                .HasColumnName("IDType");
            entity.Property(e => e.IsAcceptEasyCardDefaultBonus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("是否同意悠遊卡自動加值預設開啟，\r\n1：是\r\n0：否\r\n對應 E-CARD = NOT_ACCEPT_EPAPAER_FLG");
            entity.Property(e => e.IsAgreeDataOpen)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("本人是否同意提供資料予聯名認同集團，\r\n1：是\r\n0：否\r\n對應 E-CARD = ACCEPT_DM_FLG\r\n\r\n");
            entity.Property(e => e.IsAgreeMarketing)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("是否同意提供資料於第三人行銷，\r\n1：是\r\n0：否\r\n對應 E-CARD = AGREE_MARKETING_FLG");
            entity.Property(e => e.IsApplyAutoDeduction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("是否申辦自動扣款，\r\nY：是\r\nN：否\r\n對應 E-CARD = AUTO_FLG");
            entity.Property(e => e.IsApplyDigtalCard)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("是否申請數位卡，對應 E-CARD = DIGI_CARD_FLG\r\nY：是\r\nN：否");
            entity.Property(e => e.IsKycchange)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("KYC資料是否變動，\r\n對應 E-CARD = KYC_CHG_FLG\r\nY：是\r\nN：否")
                .HasColumnName("IsKYCChange");
            entity.Property(e => e.IsPayNoticeBind)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("是否綁定消費通知，對應 E-CARD = CONSUM_NOTICE_FLG\r\nY：是\r\nN：否");
            entity.Property(e => e.IsStudent)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("是否學生身份，對應 E-CARD = STUDENT_FLG\r\nY：是\r\nN：否");
            entity.Property(e => e.LiveOwner)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("居住地所有權人\r\n1.本人\r\n2.配偶\r\n3.父母親\r\n4.親屬\r\n5.宿舍\r\n6.租貸\r\n7.其他\r\n對應 E-CARD = HOME_ADDR_COND");
            entity.Property(e => e.LivePhone)
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasComment("居住電話，對應 E-CARD = HOME_TEL_NO\r\n\r\n");
            entity.Property(e => e.MainIncomeAndFundCodes)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("所得及資金來源，\r\n關聯SetUp_MainIncomeAndFund\r\n用, 串接\r\n需符合Paperless「主要所得及資金來源設定」。多選時中間以逗號(,)區隔\r\n對應 E-CARD = MAIN_INCOME");
            entity.Property(e => e.MainIncomeAndFundOther)
                .HasMaxLength(20)
                .HasComment("主要所得_其他，對應 E-CARD = MAIN_INCOME_OTHER");
            entity.Property(e => e.Mobile)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("行動電話，對應 E-CARD = CELL_PHONE_NO");
            entity.Property(e => e.MyDataCaseNo)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasComment("MyData案件編號，\r\n當附件註記為2：MYDATA後補時，本欄位必定有值\r\n對應 E-CARD = MYDATA_NO");
            entity.Property(e => e.Otpmobile)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("OTP手機號碼，對應 E-CARD = OTP_MOBILE_PHONE")
                .HasColumnName("OTPMobile");
            entity.Property(e => e.Otptime)
                .HasComment("OTP時間，對應 E-CARD = OTP_TIME")
                .HasColumnType("datetime")
                .HasColumnName("OTPTime");
            entity.Property(e => e.ParentName)
                .HasMaxLength(30)
                .HasComment("家長姓名，對應 E-CARD = PARENT_NAME");
            entity.Property(e => e.ParentPhone)
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasComment("家長電話，對應 E-CARD = PARENT_HOME_TEL_NO\r\n可以行動電話或者家電");
            entity.Property(e => e.ProjectCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasComment("專案代號，\r\n關聯 SetUp_ ProjectCode\r\n對應 E-CARD = M_PROJECT_CODE_ID");
            entity.Property(e => e.PromotionUnit)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("推廣單位，\r\n對應 E-CARD = PROM_UNIT_SER\r\n\r\n");
            entity.Property(e => e.PromotionUser)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("推廣人員，\r\n對應 E-CARD = PROM_USER_NAME");
            entity.Property(e => e.SendCardAddress)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("正卡_寄卡地址，\r\n1.同戶籍\r\n2.同居住\r\n3.同公司\r\n對應 E-CARD = CARD_TO_ADDR");
            entity.Property(e => e.Sex)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("正卡_性別，\r\n1.男\r\n2.女 \r\n對應 E-CARD = SEX");
            entity.Property(e => e.Source)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("進件方式，\r\n對應 E-CARD = SOURCE_TYPE\r\n1.Ecard\r\n2.APP");
            entity.Property(e => e.UserSourceIp)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasComment("使用者來源IP位置，對應 E-CARD = SOURCE_IP")
                .HasColumnName("UserSourceIP");
        });

        modelBuilder.Entity<SetUpAddressInfo>(entity =>
        {
            entity.HasKey(e => e.SeqNo);

            entity.ToTable("SetUp_AddressInfo");

            entity.Property(e => e.SeqNo)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasComment("PK");
            entity.Property(e => e.Area)
                .IsRequired()
                .HasMaxLength(5)
                .HasComment("區域，例如蘆洲區");
            entity.Property(e => e.City)
                .IsRequired()
                .HasMaxLength(5)
                .HasComment("縣市，例如新北市");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Road)
                .IsRequired()
                .HasMaxLength(20)
                .HasComment("街道");
            entity.Property(e => e.Scope)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("號判斷郵遞區號規則");
            entity.Property(e => e.Zipcode)
                .IsRequired()
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasComment("郵遞區號")
                .HasColumnName("ZIPCode");
        });

        modelBuilder.Entity<SetUpAmljobLevel>(entity =>
        {
            entity.HasKey(e => e.AmljobLevelCode);

            entity.ToTable("SetUp_AMLJobLevel", tb => tb.HasComment("AML職級別"));

            entity.Property(e => e.AmljobLevelCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasComment("AML職級別代碼，範例: 1")
                .HasColumnName("AMLJobLevelCode");
            entity.Property(e => e.AddTime)
                .HasComment("新增時間")
                .HasColumnType("datetime");
            entity.Property(e => e.AddUserId)
                .IsRequired()
                .HasMaxLength(30)
                .HasComment("新增員工");
            entity.Property(e => e.AmljobLevelName)
                .IsRequired()
                .HasMaxLength(30)
                .HasComment("AML職級別名稱")
                .HasColumnName("AMLJobLevelName");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("是否啟用，Y | N");
            entity.Property(e => e.IsSeniorManagers)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasComment("是否為高階管理人，Y | N");
            entity.Property(e => e.UpdateTime)
                .HasComment("修正時間")
                .HasColumnType("datetime");
            entity.Property(e => e.UpdateUserId)
                .HasMaxLength(30)
                .HasComment("修正員工");
        });

        modelBuilder.Entity<SetUpAmlprofession>(entity =>
        {
            entity.HasKey(e => e.SeqNo).HasName("PK_SetUp_AMLProfession_1");

            entity.ToTable("SetUp_AMLProfession", tb => tb.HasComment("AML職業別"));

            entity.Property(e => e.SeqNo)
                .HasMaxLength(26)
                .IsUnicode(false)
                .HasComment("PK");
            entity.Property(e => e.AddTime)
                .HasComment("新增時間")
                .HasColumnType("datetime");
            entity.Property(e => e.AddUserId)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("新增員工");
            entity.Property(e => e.AmlprofessionCode)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasComment("AML職業別代碼")
                .HasColumnName("AMLProfessionCode");
            entity.Property(e => e.AmlprofessionCompareResult)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasComment("AML職業別比對結果，Y | N")
                .HasColumnName("AMLProfessionCompareResult");
            entity.Property(e => e.AmlprofessionName)
                .IsRequired()
                .HasMaxLength(50)
                .HasComment("AML職業別名稱")
                .HasColumnName("AMLProfessionName");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("是否啟用，Y | N");
            entity.Property(e => e.UpdateTime)
                .HasComment("修正時間")
                .HasColumnType("datetime");
            entity.Property(e => e.UpdateUserId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("修正員工");
            entity.Property(e => e.Version)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasComment("版本，範例: 20240102，用於切分上線時間點");
        });

        modelBuilder.Entity<SetUpApplicableInterestRateLimit>(entity =>
        {
            entity.HasKey(e => e.SeqNo);

            entity.ToTable("SetUp_ApplicableInterestRateLimit", tb => tb.HasComment("判斷適用利率額度"));

            entity.Property(e => e.SeqNo)
                .ValueGeneratedNever()
                .HasComment("PK");
            entity.Property(e => e.ApplicableInterestRateLimit).HasComment("判斷適用利率額度，預設一筆且只能有一筆");
            entity.Property(e => e.UpdateTime)
                .HasComment("修正時間")
                .HasColumnType("datetime");
            entity.Property(e => e.UpdateUserId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("修正員工");
        });

        modelBuilder.Entity<SetUpApplicationCategory>(entity =>
        {
            entity.HasKey(e => e.ApplicationCategoryCode);

            entity.ToTable("SetUp_ApplicationCategory", tb => tb.HasComment("申請書類別"));

            entity.Property(e => e.ApplicationCategoryCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("申請書類別代碼，範例: AF00002");
            entity.Property(e => e.AddTime)
                .HasComment("新增時間")
                .HasColumnType("datetime");
            entity.Property(e => e.AddUserId)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("新增員工");
            entity.Property(e => e.ApplicationCategoryName)
                .IsRequired()
                .HasMaxLength(50)
                .HasComment("申請書類別名稱");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("是否啟用，Y | N");
            entity.Property(e => e.IsOcrform)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasComment("是否為OCR表單，Y | N")
                .HasColumnName("IsOCRForm");
            entity.Property(e => e.UpdateTime)
                .HasComment("修正時間")
                .HasColumnType("datetime");
            entity.Property(e => e.UpdateUserId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("修正員工");
        });

        modelBuilder.Entity<SetUpApplicationCategoryCard>(entity =>
        {
            entity.HasKey(e => e.SeqNo);

            entity.ToTable("SetUp_ApplicationCategory_Card", tb => tb.HasComment("申請書類別_卡片_關聯表"));

            entity.Property(e => e.SeqNo).HasComment("PK");
            entity.Property(e => e.AddTime)
                .HasComment("新增時間")
                .HasColumnType("datetime");
            entity.Property(e => e.AddUserId)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("新增員工");
            entity.Property(e => e.ApplicationCategoryCode)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("申請書類別代碼，範例：0123");
            entity.Property(e => e.Bincode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("BINCode，範例：33456789")
                .HasColumnName("BINCode");
        });

        modelBuilder.Entity<SetUpBillDay>(entity =>
        {
            entity.HasKey(e => e.BillDay);

            entity.ToTable("SetUp_BillDay", tb => tb.HasComment("帳單日"));

            entity.Property(e => e.BillDay)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasComment("帳單日，範例：01、03");
            entity.Property(e => e.AddTime)
                .HasComment("新增時間")
                .HasColumnType("datetime");
            entity.Property(e => e.AddUserId)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("新增員工");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("是否啟用，Y | N");
            entity.Property(e => e.UpdateTime)
                .HasComment("修正時間")
                .HasColumnType("datetime");
            entity.Property(e => e.UpdateUserId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("修正員工");
        });

        modelBuilder.Entity<SetUpBlackListReason>(entity =>
        {
            entity.HasKey(e => e.BlackListReasonCode);

            entity.ToTable("SetUp_BlackListReason", tb => tb.HasComment("黑名單理由"));

            entity.Property(e => e.BlackListReasonCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasComment("黑名單理由代碼，範例: 01、AZ");
            entity.Property(e => e.AddTime)
                .HasComment("新增時間")
                .HasColumnType("datetime");
            entity.Property(e => e.AddUserId)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("新增員工");
            entity.Property(e => e.BlackListReasonName)
                .IsRequired()
                .HasMaxLength(30)
                .HasComment("黑名單理由名稱");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("是否啟用，Y | N");
            entity.Property(e => e.ReasonStrength).HasComment("理由強度，範圍 1-  99，用來判斷黑名單理由是否顯示，目前系統只會顯示最強那筆");
            entity.Property(e => e.UpdateTime)
                .HasComment("修正時間")
                .HasColumnType("datetime");
            entity.Property(e => e.UpdateUserId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("修正員工");
        });

        modelBuilder.Entity<SetUpCard>(entity =>
        {
            entity.HasKey(e => e.Bincode).HasName("PK_SetUp_Card_1");

            entity.ToTable("SetUp_Card", tb => tb.HasComment("卡片種類"));

            entity.Property(e => e.Bincode)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasComment("BIN，長度8碼")
                .HasColumnName("BINCode");
            entity.Property(e => e.AddTime)
                .HasComment("新增時間")
                .HasColumnType("datetime");
            entity.Property(e => e.AddUserId)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("新增員工");
            entity.Property(e => e.CardCategory).HasComment("卡片類別，一般發卡、國民現金卡、消、現金卡代償");
            entity.Property(e => e.CardCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("卡片代碼，範例：JST65");
            entity.Property(e => e.CardName)
                .IsRequired()
                .HasMaxLength(30)
                .HasComment("卡片名稱");
            entity.Property(e => e.CardpacquotaLimit)
                .HasComment("CARDPAC額度限制，20")
                .HasColumnName("CARDPACQuotaLimit");
            entity.Property(e => e.DefaultBillDay)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasComment("預設帳單日，關聯 SetUp_BillDay");
            entity.Property(e => e.DefaultDiscount)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasComment("預設優惠辦法，關聯 SetUp_CardPromotion");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("是否啟用，Y | N");
            entity.Property(e => e.IsApplyAdditionalCard)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("不得申請辦附卡，Y | N，Y :  是不能申請");
            entity.Property(e => e.IsCardpaunderLimit)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("是否不大於CARDPAC額度限制，Y | N")
                .HasColumnName("IsCARDPAUnderLimit");
            entity.Property(e => e.IsCitscard)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("國旅卡，Y | N")
                .HasColumnName("IsCITSCard");
            entity.Property(e => e.IsIndependentCard)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("是否獨立卡別，Y | N");
            entity.Property(e => e.IsIvrvCtiquery)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("是否作IVR/CTI查詢，Y | N")
                .HasColumnName("IsIVRvCTIQuery");
            entity.Property(e => e.IsJointGroup)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("聯名集團，Y | N");
            entity.Property(e => e.IsQuickCardIssuance)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("快速發卡，Y | N");
            entity.Property(e => e.IsTicket)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("票證功能，Y | N");
            entity.Property(e => e.PrimaryCardQuotaLowerlimit).HasComment("主卡額度下限，範例：10000");
            entity.Property(e => e.PrimaryCardQuotaUpperlimit).HasComment("主卡額度上限，範例：3000000");
            entity.Property(e => e.PrimaryCardYearLowerlimit).HasComment("主卡年齡下限，範例：99");
            entity.Property(e => e.PrimaryCardYearUpperlimit).HasComment("主卡年齡上限，範例：20");
            entity.Property(e => e.SaleLoanCategory).HasComment("銷貸類別，0:代償、1:銷貸、2:其他");
            entity.Property(e => e.SampleRejectionLetter).HasComment("拒件函樣板，拒件函 (信用卡) 、拒件函 (消貸)、拒件函 (代償)");
            entity.Property(e => e.SupplementaryCardQuotaLowerlimit).HasComment("附卡額度下限，範例：10000");
            entity.Property(e => e.SupplementaryCardQuotaUpperlimit).HasComment("附卡額度上限，範例：3000000");
            entity.Property(e => e.SupplementaryCardYearLowerlimit).HasComment("附卡年齡下限，範例：99");
            entity.Property(e => e.SupplementaryCardYearUpperlimit).HasComment("附卡年齡上限，範例：20");
            entity.Property(e => e.UpdateTime)
                .HasComment("修正時間")
                .HasColumnType("datetime");
            entity.Property(e => e.UpdateUserId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("修正員工");
        });

        modelBuilder.Entity<SetUpCardCardPromotion>(entity =>
        {
            entity.HasKey(e => e.SeqNo);

            entity.ToTable("SetUp_Card_CardPromotion", tb => tb.HasComment("卡片種類_優惠辦法關聯表"));

            entity.Property(e => e.SeqNo).HasComment("PK");
            entity.Property(e => e.AddTime)
                .HasComment("新增時間")
                .HasColumnType("datetime");
            entity.Property(e => e.AddUserId)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("新增員工");
            entity.Property(e => e.Bincode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("BINCode，範例：JST65，關聯 SetUp_Card")
                .HasColumnName("BINCode");
            entity.Property(e => e.CardPromotionCode)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasComment("優惠辦法代碼，範例：JST65，關聯 SetUp_CardPromotion");
        });

        modelBuilder.Entity<SetUpCardPromotion>(entity =>
        {
            entity.HasKey(e => e.CardPromotionCode);

            entity.ToTable("SetUp_CardPromotion", tb => tb.HasComment("信用卡優惠辦法"));

            entity.Property(e => e.CardPromotionCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasComment("優惠辦法代碼，範例 : 0001");
            entity.Property(e => e.AddTime)
                .HasComment("新增時間")
                .HasColumnType("datetime");
            entity.Property(e => e.AddUserId)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("新增員工");
            entity.Property(e => e.CardPromotionName)
                .IsRequired()
                .HasMaxLength(50)
                .HasComment("優惠辦法名稱");
            entity.Property(e => e.InterestRate)
                .HasComment("利率，範例 : 12.22")
                .HasColumnType("decimal(5, 2)");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("是否啟用，Y | N");
            entity.Property(e => e.PrimaryCardReservedPot)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasComment("正卡預留POT，範例 : 01")
                .HasColumnName("PrimaryCardReservedPOT");
            entity.Property(e => e.PrimaryCardUsedPot)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasComment("正卡使用POT，範例 : 01")
                .HasColumnName("PrimaryCardUsedPOT");
            entity.Property(e => e.ReservePromotionPeriod)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasComment("預留優惠期限(月)，範例 : 01");
            entity.Property(e => e.SupplementaryCardReservedPot)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasComment("附卡預留POT，範例 : 01")
                .HasColumnName("SupplementaryCardReservedPOT");
            entity.Property(e => e.SupplementaryCardUsedPot)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasComment("附卡使用POT，範例 : 01")
                .HasColumnName("SupplementaryCardUsedPOT");
            entity.Property(e => e.UpdateTime)
                .HasComment("修正時間")
                .HasColumnType("datetime");
            entity.Property(e => e.UpdateUserId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("修正員工");
            entity.Property(e => e.UsedPotexpiryMonth)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasComment("使用POT截止月份，範例 : 01")
                .HasColumnName("UsedPOTExpiryMonth");
        });

        modelBuilder.Entity<SetUpCitizenship>(entity =>
        {
            entity.HasKey(e => e.CitizenshipCode);

            entity.ToTable("SetUp_Citizenship", tb => tb.HasComment("國籍設定"));

            entity.Property(e => e.CitizenshipCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasComment("國籍代碼，範例 : TW");
            entity.Property(e => e.AddTime)
                .HasComment("新增時間")
                .HasColumnType("datetime");
            entity.Property(e => e.AddUserId)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("新增員工");
            entity.Property(e => e.CitizenshipName)
                .IsRequired()
                .HasMaxLength(50)
                .HasComment("國籍名稱");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("是否啟用，Y | N");
            entity.Property(e => e.UpdateTime)
                .HasComment("修正時間")
                .HasColumnType("datetime");
            entity.Property(e => e.UpdateUserId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("修正員工");
        });

        modelBuilder.Entity<SetUpCreditCheckCode>(entity =>
        {
            entity.HasKey(e => e.CreditCheckCode);

            entity.ToTable("SetUp_CreditCheckCode", tb => tb.HasComment("徵信代碼"));

            entity.Property(e => e.CreditCheckCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasComment("徵信代碼代碼，範例: A01");
            entity.Property(e => e.AddTime)
                .HasComment("新增時間")
                .HasColumnType("datetime");
            entity.Property(e => e.AddUserId)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("新增員工");
            entity.Property(e => e.CreditCheckCodeName)
                .IsRequired()
                .HasMaxLength(30)
                .HasComment("徵信代碼名稱");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("是否啟用，Y | N");
            entity.Property(e => e.UpdateTime)
                .HasComment("修正時間")
                .HasColumnType("datetime");
            entity.Property(e => e.UpdateUserId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("修正員工");
        });

        modelBuilder.Entity<SetUpEucountry>(entity =>
        {
            entity.HasKey(e => e.EucountryCode);

            entity.ToTable("SetUp_EUCountry", tb => tb.HasComment("EU國家"));

            entity.Property(e => e.EucountryCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasComment("EU國家代碼，範例 : TW ")
                .HasColumnName("EUCountryCode");
            entity.Property(e => e.AddTime)
                .HasComment("新增時間")
                .HasColumnType("datetime");
            entity.Property(e => e.AddUserId)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("新增員工");
            entity.Property(e => e.EucountryName)
                .IsRequired()
                .HasMaxLength(50)
                .HasComment("EU國家名稱")
                .HasColumnName("EUCountryName");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("是否啟用，Y | N");
            entity.Property(e => e.UpdateTime)
                .HasComment("修正時間")
                .HasColumnType("datetime");
            entity.Property(e => e.UpdateUserId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("修正員工");
        });

        modelBuilder.Entity<SetUpEusanctionCountry>(entity =>
        {
            entity.HasKey(e => e.EusanctionCountryCode);

            entity.ToTable("SetUp_EUSanctionCountry", tb => tb.HasComment("EU制裁國家"));

            entity.Property(e => e.EusanctionCountryCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasComment("EU制裁國家代碼，範例 : TW")
                .HasColumnName("EUSanctionCountryCode");
            entity.Property(e => e.AddTime)
                .HasComment("新增時間")
                .HasColumnType("datetime");
            entity.Property(e => e.AddUserId)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("新增員工");
            entity.Property(e => e.EusanctionCountryName)
                .IsRequired()
                .HasMaxLength(50)
                .HasComment("EU制裁國家名稱")
                .HasColumnName("EUSanctionCountryName");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("是否啟用，Y | N");
            entity.Property(e => e.UpdateTime)
                .HasComment("修正時間")
                .HasColumnType("datetime");
            entity.Property(e => e.UpdateUserId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("修正員工");
        });

        modelBuilder.Entity<SetUpHighFinancialSecrecyCountry>(entity =>
        {
            entity.HasKey(e => e.HighFinancialSecrecyCountryCode);

            entity.ToTable("SetUp_HighFinancialSecrecyCountry");

            entity.Property(e => e.HighFinancialSecrecyCountryCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasComment("高金融保密國家代碼，舉例：TW");
            entity.Property(e => e.AddTime)
                .HasComment("新增時間")
                .HasColumnType("datetime");
            entity.Property(e => e.AddUserId)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("新增員工");
            entity.Property(e => e.HighFinancialSecrecyCountryName)
                .IsRequired()
                .HasMaxLength(50)
                .HasComment("高金融保密國家名稱");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("是否啟用，舉例：Y | N");
            entity.Property(e => e.UpdateTime)
                .HasComment("修正時間")
                .HasColumnType("datetime");
            entity.Property(e => e.UpdateUserId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("修正員工");
        });

        modelBuilder.Entity<SetUpHighRiskCountry>(entity =>
        {
            entity.HasKey(e => e.HighRiskCountryCode);

            entity.ToTable("SetUp_HighRiskCountry");

            entity.Property(e => e.HighRiskCountryCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasComment("洗錢及資恐高風險國家代碼，範例：TW");
            entity.Property(e => e.AddTime)
                .HasComment("新增時間")
                .HasColumnType("datetime");
            entity.Property(e => e.AddUserId)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("新增員工");
            entity.Property(e => e.HighRiskCountryName)
                .IsRequired()
                .HasMaxLength(50)
                .HasComment("洗錢及資恐高風險國家名稱");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("是否啟用，範例：Y | N");
            entity.Property(e => e.UpdateTime)
                .HasComment("修正時間")
                .HasColumnType("datetime");
            entity.Property(e => e.UpdateUserId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("修正員工");
        });

        modelBuilder.Entity<SetUpIdcardRenewalLocation>(entity =>
        {
            entity.HasKey(e => e.IdcardRenewalLocationCode);

            entity.ToTable("SetUp_IDCardRenewalLocation", tb => tb.HasComment("身分證換發地點"));

            entity.Property(e => e.IdcardRenewalLocationCode)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasComment("身分證換發地點代碼，範例: 09007000")
                .HasColumnName("IDCardRenewalLocationCode");
            entity.Property(e => e.AddTime)
                .HasComment("新增時間")
                .HasColumnType("datetime");
            entity.Property(e => e.AddUserId)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("新增員工");
            entity.Property(e => e.IdcardRenewalLocationName)
                .IsRequired()
                .HasMaxLength(10)
                .HasComment("身分證換發地點名稱，範例: 北市")
                .HasColumnName("IDCardRenewalLocationName");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("是否啟用，Y | N");
            entity.Property(e => e.UpdateTime)
                .HasComment("修正時間")
                .HasColumnType("datetime");
            entity.Property(e => e.UpdateUserId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("修正員工");
        });

        modelBuilder.Entity<SetUpInternalIp>(entity =>
        {
            entity.HasKey(e => e.Ip);

            entity.ToTable("SetUp_InternalIP", tb => tb.HasComment("行內IP 設定"));

            entity.Property(e => e.Ip)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("PK，範例 : 172.28.234.10")
                .HasColumnName("IP");
            entity.Property(e => e.AddTime)
                .HasComment("新增時間")
                .HasColumnType("datetime");
            entity.Property(e => e.AddUserId)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("新增員工");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("是否啟用，Y | N");
            entity.Property(e => e.UpdateTime)
                .HasComment("修正時間")
                .HasColumnType("datetime");
            entity.Property(e => e.UpdateUserId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("修正員工");
        });

        modelBuilder.Entity<SetUpLongTermReason>(entity =>
        {
            entity.HasKey(e => e.LongTermReasonCode);

            entity.ToTable("SetUp_LongTermReason", tb => tb.HasComment("長循分期戶理由碼"));

            entity.Property(e => e.LongTermReasonCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasComment("長循分期戶理由碼代碼，範例: 01、AZ");
            entity.Property(e => e.AddTime)
                .HasComment("新增時間")
                .HasColumnType("datetime");
            entity.Property(e => e.AddUserId)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("新增員工");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("是否啟用，Y | N");
            entity.Property(e => e.LongTermReasonName)
                .IsRequired()
                .HasMaxLength(30)
                .HasComment("長循分期戶理由碼名稱");
            entity.Property(e => e.ReasonStrength).HasComment("理由強度，範圍 1-  99");
            entity.Property(e => e.UpdateTime)
                .HasComment("修正時間")
                .HasColumnType("datetime");
            entity.Property(e => e.UpdateUserId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("修正員工");
        });

        modelBuilder.Entity<SetUpMainIncomeAndFund>(entity =>
        {
            entity.HasKey(e => e.MainIncomeAndFundCode);

            entity.ToTable("SetUp_MainIncomeAndFund", tb => tb.HasComment("主要所得及資金來源"));

            entity.Property(e => e.MainIncomeAndFundCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasComment("主要所得及資金來源代碼，範例: 1");
            entity.Property(e => e.AddTime)
                .HasComment("新增時間")
                .HasColumnType("datetime");
            entity.Property(e => e.AddUserId)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("新增員工");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("是否啟用，Y | N");
            entity.Property(e => e.MainIncomeAndFundName)
                .IsRequired()
                .HasMaxLength(30)
                .HasComment("主要所得及資金來源名稱");
            entity.Property(e => e.UpdateTime)
                .HasComment("修正時間")
                .HasColumnType("datetime");
            entity.Property(e => e.UpdateUserId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("修正員工");
        });

        modelBuilder.Entity<SetUpMakeCardFailedReason>(entity =>
        {
            entity.HasKey(e => e.MakeCardFailedReasonCode).HasName("PK_SetUp_MakeCardFaildReason");

            entity.ToTable("SetUp_MakeCardFailedReason", tb => tb.HasComment("製卡失敗原因"));

            entity.Property(e => e.MakeCardFailedReasonCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasComment("製卡失敗原因代碼，範例: 01、AZ");
            entity.Property(e => e.AddTime)
                .HasComment("新增時間")
                .HasColumnType("datetime");
            entity.Property(e => e.AddUserId)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("新增員工");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("是否啟用，Y | N");
            entity.Property(e => e.MakeCardFailedReasonName)
                .IsRequired()
                .HasMaxLength(30)
                .HasComment("製卡失敗原因名稱");
            entity.Property(e => e.UpdateTime)
                .HasComment("修正時間")
                .HasColumnType("datetime");
            entity.Property(e => e.UpdateUserId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("修正員工");
        });

        modelBuilder.Entity<SetUpProjectCode>(entity =>
        {
            entity.HasKey(e => e.ProjectCode);

            entity.ToTable("SetUp_ProjectCode", tb => tb.HasComment("專案代號設定"));

            entity.Property(e => e.ProjectCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasComment("專案代碼，範例: 100，長度3碼");
            entity.Property(e => e.AddTime)
                .HasComment("新增時間")
                .HasColumnType("datetime");
            entity.Property(e => e.AddUserId)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("新增員工");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("是否啟用，Y | N");
            entity.Property(e => e.ProjectName)
                .IsRequired()
                .HasMaxLength(30)
                .HasComment("活動名稱");
            entity.Property(e => e.UpdateTime)
                .HasComment("修正時間")
                .HasColumnType("datetime");
            entity.Property(e => e.UpdateUserId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("修正員工");
        });

        modelBuilder.Entity<SetUpPromotionUnit>(entity =>
        {
            entity.HasKey(e => e.PromotionUnitCode).HasName("PK_SetUp_ PromotionUnit");

            entity.ToTable("SetUp_PromotionUnit", tb => tb.HasComment("推廣單位設定"));

            entity.Property(e => e.PromotionUnitCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasComment("推廣單位代碼，範例: 100，長度3碼");
            entity.Property(e => e.AddTime)
                .HasComment("新增時間")
                .HasColumnType("datetime");
            entity.Property(e => e.AddUserId)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("新增員工");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("是否啟用，Y | N");
            entity.Property(e => e.PromotionUnitName)
                .IsRequired()
                .HasMaxLength(30)
                .HasComment("推廣單位名稱");
            entity.Property(e => e.UpdateTime)
                .HasComment("修正時間")
                .HasColumnType("datetime");
            entity.Property(e => e.UpdateUserId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("修正員工");
        });

        modelBuilder.Entity<SetUpRejectionReason>(entity =>
        {
            entity.HasKey(e => e.RejectionReasonCode);

            entity.ToTable("SetUp_RejectionReason", tb => tb.HasComment("退件原因"));

            entity.Property(e => e.RejectionReasonCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasComment("退件代碼，範例: 01");
            entity.Property(e => e.AddTime)
                .HasComment("新增時間")
                .HasColumnType("datetime");
            entity.Property(e => e.AddUserId)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("新增員工");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("是否啟用，範例: Y | N");
            entity.Property(e => e.RejectionReasonName)
                .IsRequired()
                .HasMaxLength(100)
                .HasComment("退件名稱");
            entity.Property(e => e.UpdateTime)
                .HasComment("修正時間")
                .HasColumnType("datetime");
            entity.Property(e => e.UpdateUserId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("修正員工");
        });

        modelBuilder.Entity<SetUpSupplementReason>(entity =>
        {
            entity.HasKey(e => e.SupplementReasonCode);

            entity.ToTable("SetUp_SupplementReason", tb => tb.HasComment("補件原因"));

            entity.Property(e => e.SupplementReasonCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasComment("補件代碼，範例: 01");
            entity.Property(e => e.AddTime)
                .HasComment("新增時間")
                .HasColumnType("datetime");
            entity.Property(e => e.AddUserId)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("新增員工");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("是否啟用，範例: Y | N");
            entity.Property(e => e.SupplementReasonName)
                .IsRequired()
                .HasMaxLength(100)
                .HasComment("補件名稱");
            entity.Property(e => e.UpdateTime)
                .HasComment("修正時間")
                .HasColumnType("datetime");
            entity.Property(e => e.UpdateUserId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("修正員工");
        });

        modelBuilder.Entity<SetUpUnsanctionCountry>(entity =>
        {
            entity.HasKey(e => e.UnsanctionCountryCode);

            entity.ToTable("SetUp_UNSanctionCountry", tb => tb.HasComment("UN制裁國家"));

            entity.Property(e => e.UnsanctionCountryCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasComment("UN制裁國家代碼，範例 : TW")
                .HasColumnName("UNSanctionCountryCode");
            entity.Property(e => e.AddTime)
                .HasComment("新增時間")
                .HasColumnType("datetime");
            entity.Property(e => e.AddUserId)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("新增員工");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("是否啟用，Y | N");
            entity.Property(e => e.UnsanctionCountryName)
                .IsRequired()
                .HasMaxLength(50)
                .HasComment("UN制裁國家名稱")
                .HasColumnName("UNSanctionCountryName");
            entity.Property(e => e.UpdateTime)
                .HasComment("修正時間")
                .HasColumnType("datetime");
            entity.Property(e => e.UpdateUserId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("修正員工");
        });

        modelBuilder.Entity<SystemDeleteLog>(entity =>
        {
            entity.HasKey(e => e.SeqNo);

            entity.ToTable("System_DeleteLog");

            entity.Property(e => e.SeqNo).HasComment("PK");
            entity.Property(e => e.DeleteTime).HasColumnType("datetime");
            entity.Property(e => e.DeleteUserId)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("刪除使用者Id");
            entity.Property(e => e.OriginData)
                .IsRequired()
                .HasComment("原始資料，儲存格式為 Json");
            entity.Property(e => e.TableName)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("刪除資料的資料表名稱");
        });

        OnModelCreatingGeneratedProcedures(modelBuilder);
        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}